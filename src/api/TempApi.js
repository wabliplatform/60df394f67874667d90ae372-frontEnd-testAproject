/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Temp from '../model/Temp';

/**
* Temp service.
* @module api/TempApi
* @version 1.0.0
*/
export default class TempApi {

    /**
    * Constructs a new TempApi. 
    * @alias module:api/TempApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtemp operation.
     * @callback module:api/TempApi~createtempCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Temp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Temp} temp data to be created
     * @param {module:api/TempApi~createtempCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Temp}
     */
    createtemp(temp, callback) {
      let postBody = temp;
      // verify the required parameter 'temp' is set
      if (temp === undefined || temp === null) {
        throw new Error("Missing the required parameter 'temp' when calling createtemp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Temp;
      return this.apiClient.callApi(
        '/temp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetemp operation.
     * @callback module:api/TempApi~deletetempCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} tempId the Id parameter
     * @param {module:api/TempApi~deletetempCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetemp(tempId, callback) {
      let postBody = null;
      // verify the required parameter 'tempId' is set
      if (tempId === undefined || tempId === null) {
        throw new Error("Missing the required parameter 'tempId' when calling deletetemp");
      }

      let pathParams = {
        'tempId': tempId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/temp/{tempId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltemp operation.
     * @callback module:api/TempApi~getAlltempCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Temp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TempApi~getAlltempCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Temp>}
     */
    getAlltemp(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Temp];
      return this.apiClient.callApi(
        '/temp/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettemp operation.
     * @callback module:api/TempApi~gettempCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Temp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} tempId the Id parameter
     * @param {module:api/TempApi~gettempCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Temp}
     */
    gettemp(tempId, callback) {
      let postBody = null;
      // verify the required parameter 'tempId' is set
      if (tempId === undefined || tempId === null) {
        throw new Error("Missing the required parameter 'tempId' when calling gettemp");
      }

      let pathParams = {
        'tempId': tempId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Temp;
      return this.apiClient.callApi(
        '/temp/{tempId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetemp operation.
     * @callback module:api/TempApi~updatetempCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Temp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} tempId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Temp} opts.temp data to be updated
     * @param {module:api/TempApi~updatetempCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Temp}
     */
    updatetemp(tempId, opts, callback) {
      opts = opts || {};
      let postBody = opts['temp'];
      // verify the required parameter 'tempId' is set
      if (tempId === undefined || tempId === null) {
        throw new Error("Missing the required parameter 'tempId' when calling updatetemp");
      }

      let pathParams = {
        'tempId': tempId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Temp;
      return this.apiClient.callApi(
        '/temp/{tempId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
